DROP PROCEDURE IF EXISTS [PROC_GetMerchantCodeForTransaction]
GO
/****** Object:  StoredProcedure [dbo].[PROC_GetMerchantCodeForTransaction]    Script Date: 19-07-2022 11:39:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [PROC_GetMerchantCodeForTransaction]
	@Sh_ExerciseNumber varchar(20),
	@GrantOptionId VARCHAR(500)
AS
BEGIN
	
	SET NOCOUNT ON;
	
	DECLARE @Merchant_Code NVARCHAR(100), @EmployeeId VARCHAR(100), @Entity_ID INT, @Entity VARCHAR(500),
			@GRANTREGISTRATIONID VARCHAR(500), @PROD_SCHEME_CODE NVARCHAR(50), @BASED_ON_EVENT NVARCHAR(50),
			@GRANT_REGISTRATION_DATE DATETIME, @VESTING_DATE DATETIME

	-- GET EMPLOYEEID FROM SHEXERCISEDOPTIONS TABLE
	SELECT 
		@EmployeeId = EMPLOYEEID 
	FROM 
		ShExercisedOptions 
	WHERE 
		(ExerciseId = @Sh_ExerciseNumber)
			
	-- GET @GRANTREGISTRATIONID FROM SHEXERCISEDOPTIONS
	SELECT 
		DISTINCT @GRANTREGISTRATIONID = GR.GrantRegistrationId 
	FROM 
		ShExercisedOptions AS SEO 
		INNER JOIN GrantLeg GL on SEO.GrantLegSerialNumber = GL.ID
		INNER JOIN GrantOptions AS GOP ON GOP.GrantOptionId = GL.GrantOptionId
		INNER JOIN GrantRegistration AS GR ON GR.GrantRegistrationId = GOP.GrantRegistrationId
	WHERE	
		(SEO.EmployeeID = @EmployeeId) AND (GL.GrantOptionId = @GrantOptionId)
	
	-- GET @ENTITY_ID FROM MASTER_LIST_FLD_VALUE
	SELECT @BASED_ON_EVENT = Based_On_Event FROM PaymentGatewayParameters
	
	IF ((UPPER(@BASED_ON_EVENT) = 'EXERCISE DATE') OR (LEN(ISNULL(@BASED_ON_EVENT, '')) = 0) OR (UPPER(@BASED_ON_EVENT) = '----- PLEASE SELECT-----'))
	BEGIN
		PRINT '@BASED_ON_EVENT : EXERCISE DATE'
		SELECT 
			@Entity_ID = MLFV.MLFV_ID, @Entity = EM.Entity  
		FROM 
			EmployeeMaster AS EM 
			INNER JOIN MASTER_LIST_FLD_VALUE AS MLFV ON UPPER(MLFV.FIELD_VALUE) = UPPER(EM.Entity)
		WHERE 
			EM.EmployeeID = @EmployeeId
	END
	ELSE IF (UPPER(@BASED_ON_EVENT) = 'GRANT DATE')
	BEGIN
		--PRINT '@BASED_ON_EVENT : GRANT DATE'
		--PRINT '@GRANTREGISTRATIONID : ' + @GRANTREGISTRATIONID
		--PRINT '@EmployeeId : ' + @EmployeeId
		
		SET @GRANT_REGISTRATION_DATE = (SELECT GrantDate FROM GrantRegistration WHERE GrantRegistrationId = @GRANTREGISTRATIONID)
		
		--PRINT '@GRANT_REGISTRATION_DATE : ' + CONVERT(VARCHAR(100),@GRANT_REGISTRATION_DATE)
				
		CREATE TABLE #TEMP_GET_ENTITY_VALUE_GRANT
		(	
			EMPLOYEE_ID NVARCHAR(50), FIELD_NAME NVARCHAR(250), FROM_DATE DATETIME, TO_DATE DATETIME
		)
		INSERT INTO #TEMP_GET_ENTITY_VALUE_GRANT (EMPLOYEE_ID, FIELD_NAME, FROM_DATE, TO_DATE)
		EXEC PROC_GET_ENTITY_FOR_PG @EmployeeId, @GRANT_REGISTRATION_DATE, @GRANT_REGISTRATION_DATE, 'ENTITY'	
		
		SELECT 
			@Entity_ID = MLFV.MLFV_ID, @Entity = TGEVG.FIELD_NAME  
		FROM 
			#TEMP_GET_ENTITY_VALUE_GRANT AS TGEVG
			INNER JOIN MASTER_LIST_FLD_VALUE AS MLFV ON UPPER(MLFV.FIELD_VALUE) = UPPER(TGEVG.FIELD_NAME)
		WHERE 
			TGEVG.EMPLOYEE_ID = @EmployeeId 
	END
	ELSE IF (UPPER(@BASED_ON_EVENT) = 'VESTING DATE')
	BEGIN
		PRINT '@BASED_ON_EVENT : VESTING DATE'
		
		SET @VESTING_DATE = 
		(
			SELECT 
				GL.FinalVestingDate 
			FROM 
				GrantLeg AS GL 
				INNER JOIN ShExercisedOptions AS SHEO ON SHEO.GrantLegSerialNumber = GL.ID
			WHERE 
				ExerciseNo = @Sh_ExerciseNumber
		)
		
		--PRINT '@EmployeeId : ' + @EmployeeId
		--PRINT '@VESTING_DATE : ' + CONVERT(VARCHAR(100),@VESTING_DATE)
				
		CREATE TABLE #TEMP_GET_ENTITY_VALUE_VEST
		(	
			EMPLOYEE_ID NVARCHAR(50), FIELD_NAME NVARCHAR(250), FROM_DATE DATETIME, TO_DATE DATETIME
		)
		INSERT INTO #TEMP_GET_ENTITY_VALUE_VEST (EMPLOYEE_ID, FIELD_NAME, FROM_DATE, TO_DATE)
		EXEC PROC_GET_ENTITY_FOR_PG @EmployeeId, @VESTING_DATE, @VESTING_DATE, 'ENTITY'	
		
		SELECT 
			@Entity_ID = MLFV.MLFV_ID, @Entity = TGEVV.FIELD_NAME  
		FROM 
			#TEMP_GET_ENTITY_VALUE_VEST AS TGEVV 
			INNER JOIN MASTER_LIST_FLD_VALUE AS MLFV ON UPPER(MLFV.FIELD_VALUE) = UPPER(TGEVV.FIELD_NAME)
		WHERE 
			TGEVV.EMPLOYEE_ID = @EmployeeId 		
	END
	
	-- FIRST MERCHANTCODE NEEDS TO PICK FROM MANAGEMERCHANTCODE TABLE IF MERCHANT CODE IS AVAILABLE IN MANAGEMERCHANTCODE TABLE
	IF EXISTS(SELECT MERCHANTCODE FROM MANAGEMERCHANTCODE WHERE (GRANTREGISTRATIONID = @GRANTREGISTRATIONID) AND (MLFV_ID = @Entity_ID))
	BEGIN
		 --PRINT 'FROM MERCHANTCODE' 		
		SELECT @Merchant_Code = MERCHANTCODE FROM MANAGEMERCHANTCODE WHERE (GRANTREGISTRATIONID = @GRANTREGISTRATIONID) AND (MLFV_ID = @Entity_ID)
	END	
	-- IF MERCHANT CODE IS NOT AVAILABLE IN MANAGEMERCHANTCODE TABLE THEN GET MERCHANTCODE FROM GRANTREGISTRATION TABLE
	ELSE IF EXISTS(SELECT GrantRegistrationId FROM GrantRegistration WHERE (GRANTREGISTRATIONID = @GRANTREGISTRATIONID) AND (LEN(Merchant_Code)>0))
	BEGIN
		 --PRINT 'FROM GRANTREGISTRATION' 		
		SELECT @Merchant_Code = Merchant_code FROM GrantRegistration WHERE (GRANTREGISTRATIONID = @GRANTREGISTRATIONID)		
	END			
	-- IF MERCHANT CODE IS NOT AVAILABLE IN MANAGEMERCHANTCODE AND GRANTREGISTRATION TABLE THEN DEFAULT MERCHANTCODE SHOULD BE TAKEN FROM PAYMENTGATEWAYPARAMETERS
	ELSE	
	BEGIN
		--PRINT 'FROM PAYMENTGATEWAYPARAMETERS' 
		SELECT @Merchant_Code = Merchant_Code FROM PaymentGatewayParameters			
	END
	
	-- IF PROD2 FOR TPSL NEEDS TO SET AND GET DYNAMICALLY THEN THE VALUE NEEDS TO BE SET AS 1 IN PAYMENTGATEWAYPARAMETERS.ISPROD2DYNAMIC.
	IF ((SELECT IsProd2Dynamic FROM PaymentGatewayParameters) = 1)
		SET @Merchant_Code  = @Merchant_Code + '~' + (SELECT Merchant_Code FROM PaymentGatewayParameters)				
	
	SELECT @Merchant_Code	
	  
END
GO


